function WLTimer(d = 0, t = 0, i = 0, h = 0) { this.d = d, this.h = t, this.i = i, this.s = h, this.auto_id = { add: { d: null, h: null, i: null, s: null }, reduce: { d: null, h: null, i: null, s: null } }, this.time_reset = function () { this.d = this.h = this.i = this.s = 0 }, this.add_s = function (d) { 86400 <= d && (add_day = Math.floor(d / 86400), this.d += add_day, d -= 86400 * add_day), 3600 <= d && (add_hour = Math.floor(d / 3600), this.h += add_hour, d -= 3600 * add_hour), 60 <= d && (add_minute = Math.floor(d / 60), this.add_i(add_minute), d -= 60 * add_minute), 60 <= this.s + d ? (this.s = this.s + d - 60, this.add_i(1)) : this.s += d }, this.auto_add_s = function (d, t) { var i = this; i.auto_id.add.s = setInterval(function () { i.add_s(d) }, t) }, this.add_i = function (d) { 1440 <= d && (add_day = Math.floor(d / 1440), this.d = this.d + add_day, d -= 1440 * add_day), 60 <= d && (add_hour = Math.floor(d / 60), this.h = this.h + add_hour, d -= 60 * add_hour), 60 <= this.i + d ? (this.i = this.i + d - 60, this.h++) : this.i += d }, this.auto_add_i = function (d, t) { var i = this; i.auto_id.add.i = setInterval(function () { i.add_i(d) }, t) }, this.add_h = function (d) { 24 <= d && (add_day = Math.floor(d / 24), this.d = this.d + add_day, d -= 24 * add_day), 24 <= this.h + d ? (this.h = this.h + d - 24, this.d++) : this.h += d }, this.auto_add_h = function (d, t) { var i = this; i.auto_id.add.h = setInterval(function () { i.add_h(d) }, t) }, this.auto_add_d = function (d, t) { var i = this; i.auto_id.add.d = setInterval(function () { i.d += d }, t) }, this.reduce_d = function (d) { this.d < d ? this.time_reset() : this.d -= d }, this.auto_reduce_d = function (d, t) { var i = this; i.auto_id.reduce.d = setInterval(function () { i.reduce_d(d) }, t) }, this.reduce_h = function (d) { 24 <= d && (reduce_d = Math.floor(d / 24), this.reduce_d(reduce_d), d -= 24 * reduce_d), d > this.h ? (this.h = this.h - d + 24, this.reduce_d(1)) : this.h -= d }, this.auto_reduce_h = function (d, t) { var i = this; i.auto_id.reduce.h = setInterval(function () { i.reduce_h(d) }, t) }, this.reduce_i = function (d) { 1440 <= d && (reduce_d = Math.floor(d / 1440), this.reduce_d(reduce_d), d -= 1440 * reduce_d), 60 <= d && (reduce_h = Math.floor(d / 60), this.reduce_d(reduce_h), d -= 60 * reduce_h), d > this.i ? (this.i = this.i - d + 60, this.reduce_h(1)) : this.i -= d }, this.auto_reduce_i = function (d, t) { var i = this; i.auto_id.reduce.i = setInterval(function () { i.reduce_i(d) }, t) }, this.reduce_s = function (d) { 86400 <= d && (reduce_d = Math.floor(d / 86400), this.reduce_d(reduce_d), d -= 86400 * reduce_d), 3600 <= d && (reduce_h = Math.floor(d / 3600), this.reduce_h(reduce_h), d -= 3600 * reduce_h), 60 <= d && (reduce_i = Math.floor(d / 60), this.reduce_i(reduce_i), d -= 60 * reduce_i), d > this.s ? (this.s = this.s - d + 60, this.reduce_i(1)) : this.s -= d }, this.auto_reduce_s = function (d, t) { var i = this; i.auto_id.reduce.s = setInterval(function () { i.reduce_s(d) }, t) }, this.stop_auto = function (d = "add", t = "s") { clearInterval(this.get_auto_id(d, t)) }, this.get_auto_id = function (d, t) { var i = this.auto_id, i = "reduce" === d ? i.reduce : i.add; switch (t) { case "d": i = i.d; break; case "h": i = i.h; break; case "i": i = i.i; break; default: i = i.s }return i } }